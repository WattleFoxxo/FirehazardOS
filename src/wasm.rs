use wasmi::*;
use crate::println;
use crate::drivers::disk::ata;

pub async fn init() {
    let engine = Engine::default();

    
    // let wasm: [u8; 512] = [0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x60, 0x01, 0x7f, 0x00, 0x60, 0x00, 0x00, 0x02, 0x0e, 0x01, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x03, 0x02, 0x01, 0x01, 0x07, 0x09, 0x01, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x01, 0x0a, 0x08, 0x01, 0x06, 0x00, 0x41, 0x03, 0x10, 0x00, 0x0b, 0x00, 0x1b, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x01, 0x0d, 0x01, 0x00, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x02, 0x05, 0x02, 0x00, 0x00, 0x01, 0x00];
    
    let mut wasm: [u8; 512] = [0; 512];

    ata::read_sector(0, &mut wasm);

    let module = Module::new(&engine, &wasm[..]).unwrap();

    type HostState = u32;
    let mut store = Store::new(&engine, 42);
    let host_hello = Func::wrap(&mut store, |caller: Caller<'_, HostState>, param: i32| {
        println!("Got {param} from WebAssembly");
        println!("My host state is: {}", caller.data());
    });

    let mut linker = <Linker<HostState>>::new(&engine);

    linker.define("host", "hello", host_hello);
    
    let instance = linker.instantiate(&mut store, &module).expect("REASON").start(&mut store);
    let hello = instance.expect("REASON").get_typed_func::<(), ()>(&store, "hello");

    hello.expect("REASON").call(&mut store, ());
}